/*
 * celia.date.js v1.0.0
 * (c) 2018-2019 Jesse Feng
 * Released under the MIT License.
 */
import 'celia/isObject';
import 'celia/_forOwn';
import 'celia/isNil';
import './_parseArray-d7b9616a.js';
import 'celia/_loop';
import { M as MS_OF_DAY, a as MS_OF_HOUR, b as MS_OF_MINUTE, c as MS_OF_SECOND } from './_dateConsts-b029053d.js';
import { Y as YEAR, M as MONTH, D as DAY, H as HOUR, a as MINUTE, S as SECOND, n as normalizeUnit } from './_normalizeUnit-4674c723.js';
import add from './add.js';
import clone from './clone.js';
import 'celia/_repeat';
import 'celia/isString';
import 'celia/_forEach';
import 'celia/isNumber';
import 'celia/isDate';
import './_dateRegex-46ce12f7.js';
import parse from './parse.js';

function monthDiff(a, b) {
  var wholeMonthDiff = ((b.getFullYear() - a.getFullYear()) * 12) + (b.getMonth() - a.getMonth());
  var anchor = add(clone(a), wholeMonthDiff, MONTH);
  var anchor2, adjust;

  if (b < anchor) {
    anchor2 = add(clone(a), wholeMonthDiff - 1, MONTH);
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = add(clone(a), wholeMonthDiff + 1, MONTH);
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}

function absFloor(number) {
  return number < 0 ? (Math.ceil(number) || 0) : Math.floor(number);
}

function diff (date, input, units, asFloat) {
  input = parse(input);
  var output;
  units = normalizeUnit(units);

  switch (units) {
    case YEAR:
      output = monthDiff(date, input) / 12;
      break;
    case MONTH:
      output = monthDiff(date, input);
      break;
    // case 'D':
    case DAY:
      output = (date - input) / MS_OF_DAY;
      break;
    case HOUR:
      output = (date - input) / MS_OF_HOUR;
      break;
    case MINUTE:
      output = (date - input) / MS_OF_MINUTE;
      break;
    case SECOND:
      output = (date - input) / MS_OF_SECOND;
      break;
    default:
      output = date - input;
  }

  return asFloat ? output : absFloor(output);
}

export default diff;
