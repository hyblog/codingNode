/*
 * celia.date.js v1.0.0
 * (c) 2018-2019 Jesse Feng
 * Released under the MIT License.
 */
'use strict';

var isNil = require('celia/isNil');
var loop = require('celia/_loop');
var _dateConsts = require('./_dateConsts-9a8bf1f4.js');

var dateProto = Date.prototype;
/* eslint no-extend-native: 0 */
if (!dateProto.setDay) {
  dateProto.setDay = function (val) {
    var day = this.getDay();
    if (val !== day) {
      this.setTime(+this + ((val - day) * _dateConsts.MS_OF_DAY));
    }
  };
}

var UNITS = {};
var fns = {};

function setter(longer, method, alias) {
  fns[longer] = fns[alias || longer] = function (date, val) {
    if (isNil(val)) {
      return date[("get" + method)]();
    } else {
      date[("set" + method)](val);
      return date;
    }
  };
}
function mapping(key) {
  loop(arguments, 0, arguments.length, function (arg) {
    UNITS[arg] = key;
  });
  UNITS[key] = key;
}

var YEAR = 'year';
var MONTH = 'month';
var DATE = 'date';
var DAY = 'day';
var HOUR = 'hour';
var MINUTE = 'minute';
var SECOND = 'second';
var MILLISECOND = 'millisecond';
var TIME = 'time';

setter(YEAR, 'FullYear');
setter(MONTH, 'Month');
setter(DATE, 'Date');
setter(DAY, 'Day', 'days');
setter(HOUR, 'Hours', 'hours');
setter(MINUTE, 'Minutes', 'minutes');
setter(SECOND, 'Seconds', 'seconds');
setter(MILLISECOND, 'Milliseconds', 'milliseconds');
setter(TIME, 'Time');

mapping(YEAR, 'Y');
mapping(MONTH, 'M');
mapping(DATE, 'D');
mapping(DAY, 'days', 'd');
mapping(HOUR, 'hours', 'h');
mapping(MINUTE, 'minutes', 'm');
mapping(SECOND, 'seconds', 's');
mapping(MILLISECOND, 'milliseconds', 'ms');
mapping(TIME, 't');

function normalize(u, defaultValue) {
  return UNITS[u] || defaultValue;
}

exports.DATE = DATE;
exports.DAY = DAY;
exports.HOUR = HOUR;
exports.MILLISECOND = MILLISECOND;
exports.MINUTE = MINUTE;
exports.MONTH = MONTH;
exports.SECOND = SECOND;
exports.TIME = TIME;
exports.YEAR = YEAR;
exports.fns = fns;
exports.normalizeUnit = normalize;
