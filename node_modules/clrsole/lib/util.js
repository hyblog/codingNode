'use strict';

const isNil = require('celia/isNil');

const ALL = { level: 'ALL', value: -Number.MAX_SAFE_INTEGER, color: 'whiteBright' };
const OFF = { level: 'OFF', value: -Number.MAX_VALUE, color: 'gray' };

let levels;
let colors;
let currentLevels;

/**
 * 切换日志级别
 * @param {Array} type 日志级别类型
 * @param {Function} callback
 */
function setLevels(type, callback) {
  // 统一大小写
  currentLevels = type;
  levels = Object.create(null);
  colors = Object.create(null);
  currentLevels.forEach((n, i) => {
    let { level, value, color } = n;
    level = level.toLocaleUpperCase();
    levels[level] = value;
    colors[level] = color;
    n.level = level;
    callback && callback(n);
  });
  [ALL, OFF].forEach(({ level, value, color }) => {
    levels[level] = value;
    colors[level] = color;
  });
}

// 默认使用log4j日志级别
setLevels(require('./levels'));

module.exports = {
  /**
   * firstLevel是否能用
   * @param {String} firstLevel
   * @param {String} secondLevel
   */
  isLevelEnabled(firstLevel, secondLevel) {
    return !firstLevel || levels[firstLevel] >= levels[secondLevel];
  },

  /**
   * 是否是合法级别
   * @param {String} level
   */
  isValid(level) {
    return level && !isNil(levels[level.toLocaleUpperCase()]);
  },

  /**
   * 获取所有级别的名称
   */
  levelNames() {
    return currentLevels.map(({ level }) => level);
  },

  /**
   * 遍历级别
   * @param {Function} callback
   */
  eachLevel(callback) {
    currentLevels.forEach(callback);
  },

  /**
   * 根据级别获取颜色
   * @param {String} level
   */
  getColor(level) {
    return colors[level];
  },
  /**
   * 根据级别获取颜色
   * @param {String} level
   */
  getValue(level) {
    return levels[level];
  },
  setLevels
};
