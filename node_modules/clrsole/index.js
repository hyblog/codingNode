'use strict';

const AbstractLevel = require('./lib/classes/AbstractLevel');
const AbstractAppender = require('./lib/classes/AbstractAppender');
const ConsoleAppender = require('./lib/classes/ConsoleAppender');
const { isValid, setLevels, eachLevel } = require('./lib/util');
const output = require('./lib/output');

class Console extends AbstractLevel {

  /**
   * 创建logger实例
   * @param {String} loggerName
   * @param {Object} options
   */
  static getLogger(loggerName, options) {
    return new Console(loggerName, options);
  }

  /**
  * 日志操作类
  * @param {String} loggerName 日志分类
  * @param {Object} options
  */
  constructor(loggerName, options) {
    super(options);
    this.name = loggerName;
    options = this.options;

    this._makeLogMethod = this._makeLogMethod.bind(this);

    let { levels } = options;
    if (levels) {
      this.setLevels(levels);
    } else {
      // 重置级别相关的函数
      eachLevel(this._makeLogMethod);
    }

    this.appenders = (options.appenders || [])
      .concat(ConsoleAppender)
      .map(Appender => new Appender(loggerName, options));
  }

  /**
   * 构造日志方法
   * @param {Object} param
   */
  _makeLogMethod({ level }) {
    this[level.toLocaleLowerCase()] = function (...args) {
      return this._log(level, args);
    };
  }

  /**
   * 记录日志
   * @param {String} level 级别
   * @param {Array} args 日志内容
   */
  _log(level, args) {
    if (this.isLevelEnabled(level)) {
      const { name } = this;
      this.appenders.forEach((appender) => {
        appender.append(args, {
          level,
          timestamp: Date.now(),
          logger: name
        });
      });
    }
    return this;
  }

  /**
   * 记录日志，兼容console.log
   * @param {String} level 级别
   * @param {...} args 日志内容
   */
  log(level, ...args) {
    if (!isValid(level)) {
      args.unshift(level);
      level = 'ALL';
    }
    return this._log(level.toLocaleUpperCase(), args);
  }

  /**
   * 设置日志级别种类
   * @param {Array} levels
   */
  setLevels(levels) {
    if (levels && this.levels !== levels) {
      // 重置级别相关的函数
      eachLevel(({ level }) => {
        delete this[level.toLocaleLowerCase()];
      });
      // 设置级别种类 and 暴露级别相关的函数
      setLevels(levels, this._makeLogMethod);
      this.levels = levels;
    }
    return this;
  }

  /**
   * 销毁内部对象
   */
  destroy() {
    return Promise.all(
      this.appenders.map(appender => appender.destroy())
    ).then(() => {
      try {
        Object.keys(this).forEach((key) => {
          delete this[key];
        });
      } catch (e) { }
    });
  }

}

Console.AbstractAppender = AbstractAppender;
Console.isValid = isValid;
Console.setLevels = setLevels;
Console.output = output;

module.exports = Console;
